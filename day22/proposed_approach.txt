Proposed Approach

Consider all possibilities for node A (unless node A used == 0T)
  For each node A possibility, consider all possible choices for node B
      You cannot have the same node for both A and B
      Node A's "Used" must be <= Node B's "Avail"

Have a list of named tuples, where the list is sorted by "Avail"

Initialize the variable for number of valid pairs to zero

Traverse the list:  1st traversal
  Create a lookup table for "Avail" to number of nodes with "Avail" >= than that

Traverse the list:  2nd traversal
  For each element, retrieve "Used" and "Avail" values
      If "Used" == 0, disregard it
      Use the lookup table to get the number of nodes that can contain this.
      If this node's "Avail" is >= than it's "Used," then reduce the number (from lookup table) by one
      Update number of valid pairs

At the end, the total number of valid pairs should have been successfully calculated.

