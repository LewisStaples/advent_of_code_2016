Approach to part A:

Consider all possibilities for node A (unless node A used == 0T)
  For each node A possibility, consider all possible choices for node B
      You cannot have the same node for both A and B
      Node A's "Used" must be <= Node B's "Avail"

Have a list of named tuples, where the list is sorted by "Avail"

Initialize the variable for number of valid pairs to zero

(Note:  original lookup table idea was dropped)

Consider all nodes as a potential node A
(unless for any [node A]s with a "used" amount of zero)

  Consider all nodes as a potential node B
  (unless A and B are the same node)

    If node A's "Used" <= node B's "Avail", increment the count of valid pairs.

At the end, the total number of valid pairs should have been successfully calculated.

